openapi: 3.0.3
info:
  title: Huell
  description: All knowledge known to human race about Ultimate API Guard
  version: '1.0'
servers:
  - url: http://localhost:5080
    description: local development environment
paths:
  /api/v1/login:
    post:
      summary: Get user's auth token
      description: This endpoint gives user's auth token if given auth data is correct
      tags:
        - Auth
      requestBody:
        description: User auth data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Auth data is correct, auth token sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Request rejected due to bad syntax / wrong variable type / wrong headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '406':
          description: Request rejected due to wrong login data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/user:
    get:
      summary: Get user's data by id
      description: Endpoint which returns specific user's data by id
      tags:
        - User
      responses:
        '200':
          description: Everything is correct, user data in response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFindResponse'
        '401':
          description: User authentication rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USERAPP.NAE"
                desc: "Missing authorization token"
        '400':
          description: Request rejected due to wrong headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "APP.WHE"
                desc: "Missing header: Accept"
        '404':
          description: Given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UNF"
                desc: "User with ID be964b8c-59cf-4549-9f25-eb6bb63824ec does not exist"
        '503':
          description: User could not be found due to unknown reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UCE"
                desc: "User could not be found - no further information"
      security:
        - bearerAuth: [ ]
    post:
      summary: Create user
      description: This endpoint creates user with given data
      tags:
        - User
      requestBody:
        description: New user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Request rejected due to bad syntax / wrong variable type / wrong headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "APP.BR"
                desc: "The browser (or proxy) sent a request that this server could not understand."
        '406':
          description: Request rejected due to wrong content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.PSE"
                desc: "Password is too long (max 25)"
        '503':
          description: User could not be created due to unknown reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UCE"
                desc: "User could not be created - no further information"
    delete:
      summary: Delete user
      description: This endpoint deletes user and it's data
      tags:
        - User
      responses:
        '204':
          description: User deleted, no further information
        '400':
          description: Request rejected due to wrong headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.WHE"
                desc: "Wrong Accept header (application/javascript vs application/json)"
        '401':
          description: User authentication rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "JWT.DE"
                desc: "JWT has expired"
        '404':
          description: Given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UNF"
                desc: "User with ID be964b8c-59cf-4549-9f25-eb6bb63824ec does not exist"
        '503':
          description: User could not be deleted due to unknown reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UDE"
                desc: "User could not be deleted - no further information"
      security:
        - bearerAuth: [ ]
  /api/v1/user/change-passwd:
    put:
      summary: Change password
      description: This endpoint changes user's password
      tags:
        - User
      requestBody:
        description: Old and new user's password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPasswordChangeRequest"
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Password changed, no further information
        '401':
          description: User authentication rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Request rejected due to bad syntax / wrong variable type / wrong headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '406':
          description: Request rejected due to wrong content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Password could not be changed due to unknown reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "USER.UDE"
                desc: "Password could not be changed - no further information"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
          description: User's nickname
        password:
          type: string
          description: User's password (shh... it's secret)
      example:
        username: GALJO
        password: qwerty1234
    UserCreateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: New user's ID
      example:
        userID: 08b499e5-2fad-49d9-8f8a-fd440f9d248f
    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
          description: User's nickname
        password:
          type: string
          description: User's password (shh... it's secret)
      example:
        username: GALJO
        password: qwerty1234
    UserLoginResponse:
      type: object
      properties:
        token:
          type: string
          description: User's JWT token
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjA4YjQ5OWU1LTJmYWQtNDlkOS04ZjhhLWZkNDQwZjlkMjQ4ZiIsImJpcnRoIjoxNjU4MDU3ODk1LjE0MzEwNH0.-vxbTqqyu6bd359gFEA5QtvcFb0wv_pM7z7KYFG9hE0
    UserFindResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User's unique ID
        username:
          type: string
          description: User's nickname
      example:
        userID: 08b499e5-2fad-49d9-8f8a-fd440f9d248f
        username: GALJO
    UserPasswordChangeRequest:
      type: object
      properties:
        currentPasswd:
          type: string
          description: User's current password
        newPasswd:
          type: string
          description: User's new password
      example:
        currentPassword: qwerty1234
        newPassword: qwertyuiop!
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
        desc:
          type: string
          description: Details of error
      example:
        code: EXAMPLE.CME
        desc: User ate too much cookies